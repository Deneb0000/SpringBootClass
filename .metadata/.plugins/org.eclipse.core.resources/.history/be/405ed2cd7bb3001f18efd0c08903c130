1. controller.MainController.java 추가
	/index => /index.html 요청 처리.
	
2.	JPA 사용
 SQL문 작성 -> pstat.execute()~ (이제 필요없다)
insert into question (id, subject, content) values (1, '안녕하세요', '가입 인사드립니다 ^^');
insert into question (id, subject, content) values (2, '질문 있습니다', 'ORM이 궁금합니다');

[ORM] 엔티티 -> DB 연동
Question 엔티티 클래스 선언이 되어있을껄?
	Question q1 = new Question();
	q1.setSubject("안녕하세요");
	q1.setContent("가입 인사드립니다 ^^");
	this.question[Repository].save(q1);		JPA API save() 메서드
	
	
3. 내장되어 있는 H2 데이터베이스 설치 (DB 사용x)
	- 개발용으로 사용하는 데이터 베이스
	- 자바 기반의 경량 DBMS
	- 빠르게 개발 -> 실제 운영하고자하는 DBMS에 업로드 (Oracle, MS SQL, My SQL 등등)
	- build.gradle 파일
		ryntimeOnly 'com.h2database:h2'

4. 설치한 H2 데이터베이스를 사용하기를 위한 설정 (application.properties)

spring.h2.console.enablexd = true
-h2 콘솔에 접속
- 웹 UI

spring.h2.console.path=/h2-console
-h2 콘솔에 접속 경로

spring.datasource.url=jdbc:h2~/local
- 데이터베이스에 접속 경로
	local.mv.db 데이터베이스 파일 생성
	~ : 사용자의 홈 디렉토리
	cmd>
	C:\Windows\System32>cd c:\users\user

	c:\Users\user>copy con local.mv.db
	^Z
        1개 파일이 복사되었습니다.

	c:\Users\user>

spring.datasource.driver-class-name=org.h2.Driver
- 드라이버 클래스명

spring.datasource.username=sa
- 계정

spring.datasource.password=
- 비밀번호

5. JPA 환경 설정
 h2 데이터베이스 설치 + 파일 생성
 우리가 사용하는 프로그램에서 JPA를 사용해서 환경설정을 할것이다 
 implementation 'org.springframework.boot:spring-boot-starter-data-jpa' 
 
 6. - 질문(Question) 테이블
속성 이름  설명
id   		 질문 데이터의 고유 번호
subject   질문 데이터의 제목
content   질문 데이터의 내용
createDate   질문 데이터를 작성한 일시

  	- 답변(Answer) 테이블
id   			답변 데이터의 고유 번호
question   	질문 데이터 (어떤 질문의 답변인지 알아야 하므로 이 속성이 필요하다.)
content   	답변 데이터의 내용
createDate 답변 데이터를 작성한 일시  	
   
	
	